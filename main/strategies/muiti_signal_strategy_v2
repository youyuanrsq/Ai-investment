from vnpy.app.cta_strategy import (
    StopOrder,
    TickData,
    BarData,
    TradeData,
    OrderData,
    BarGenerator,
    ArrayManager,
    CtaSignal,
    CtaTemplate
)


class RsiSignal(CtaSignal):
    """"""

    def __init__(self, rsi_window: int, rsi_level: float):
        """Constructor"""
        super().__init__()

        self.rsi_window = rsi_window
        self.rsi_level = rsi_level
        self.rsi_long = 50 + self.rsi_level
        self.rsi_short = 50 - self.rsi_level

        self.bg = BarGenerator(self.on_bar)
        self.am = ArrayManager()

    def on_tick(self, tick: TickData):
        """
        Callback of new tick data update.
        """
        self.bg.update_tick(tick)

    def on_bar(self, bar: BarData):
        """
        Callback of new bar data update.
        """
        self.am.update_bar(bar)
        if not self.am.inited:
            self.set_signal_pos(0)

        rsi_value = self.am.rsi(self.rsi_window)

        if rsi_value >= self.rsi_long:
            self.set_signal_pos(1)
        elif rsi_value <= self.rsi_short:
            self.set_signal_pos(-1)
        else:
            self.set_signal_pos(0)


class MaSignal(CtaSignal):
    """"""

    def __init__(self, fast_window: int, slow_window: int):
        """"""
        super().__init__()

        self.fast_window = fast_window
        self.slow_window = slow_window

        self.bg = BarGenerator(self.on_bar, 5, self.on_5min_bar)
        self.am = ArrayManager()

    def on_tick(self, tick: TickData):
        """
        Callback of new tick data update.
        """
        self.bg.update_tick(tick)

    def on_bar(self, bar: BarData):
        """
        Callback of new bar data update.
        """
        self.bg.update_bar(bar)

    def on_5min_bar(self, bar: BarData):
        """"""
        self.am.update_bar(bar)
        if not self.am.inited:
            self.set_signal_pos(0)

        fast_ma = self.am.sma(self.fast_window, array=True)
        slow_ma = self.am.sma(self.slow_window, array=True)

        if fast_ma[-1] > slow_ma[-1] and fast_ma[-2] < slow_ma[-2]:
            self.set_signal_pos(1)
        elif fast_ma[-1] < slow_ma[-1] and fast_ma[-2] > slow_ma[-2]:
            self.set_signal_pos(-1)
        else:
            self.set_signal_pos(0)



class MultiSignalStrategyV2(CtaTemplate):
    """"""

    author = "youyuan"

    rsi_window = 9
    rsi_level = 20
    fast_window = 5
    slow_window = 10
    fix_size = 1
    signal_value = {}

    parameters = ["rsi_window", "rsi_level", "fast_window", "slow_window"]
    variables = ["signal_value"]

    def __init__(self, cta_engine, strategy_name, vt_symbol, setting):
        """"""
        super().__init__(cta_engine, strategy_name, vt_symbol, setting)

        self.rsi_signal = RsiSignal(self.rsi_window, self.rsi_level)
        self.ma_signal = MaSignal(self.fast_window, self.slow_window)

        self.signal_value = {
            "rsi": 0,
            "ma": 0,
        }

    def on_init(self):
        """
        Callback when strategy is inited.
        """
        self.write_log("策略初始化")
        self.load_bar(6)

    def on_start(self):
        """
        Callback when strategy is started.
        """
        self.write_log("策略启动")

    def on_stop(self):
        """
        Callback when strategy is stopped.
        """
        self.write_log("策略停止")

    def on_tick(self, tick: TickData):
        """
        Callback of new tick data update.
        """
        super(MultiSignalStrategyV2, self).on_tick(tick)

        self.rsi_signal.on_tick(tick)
        self.ma_signal.on_tick(tick)

    def on_bar(self, bar: BarData):
        """
        Callback of new bar data update.
        """
        super(MultiSignalStrategyV2, self).on_bar(bar)

        self.rsi_signal.on_bar(bar)
        self.ma_signal.on_bar(bar)

        self.signal_value["rsi"] = self.rsi_signal.get_signal_pos()
        self.signal_value["ma"] = self.ma_signal.get_signal_pos()

        total_signal_value = 0
        for v in self.signal_value.values():
            total_signal_value += v

        if total_signal_value > 0 and self.signal_value['rsi'] > 0:
            price = bar.close_price + 5
            if not self.pos:
                self.buy(price, self.fix_size)
            elif self.pos < 0:
                self.cover(price, self.fix_size)
                self.buy(price, self.fix_size)
        elif total_signal_value < 0 and self.signal_value['rsi'] < 0:
            price = bar.close_price - 5
            if not self.pos:
                self.sell(price, self.fix_size)
            elif self.pos > 0:
                self.sell(price, self.fix_size)
                self.short(price, self.fix_size)

        self.put_event()

    def on_order(self, order: OrderData):
        """
        Callback of new order data update.
        """
        super(MultiSignalStrategyV2, self).on_order(order)

    def on_trade(self, trade: TradeData):
        """
        Callback of new trade data update.
        """
        self.put_event()

        print('rsi value:', self.signal_value['rsi'], 'ma value:', self.signal_value['ma'], 'datetime:', trade.datetime)
        msg = f"新的成交，策略{self.strategy_name}, 方向{trade.direction}, 成交量{trade.volume}, " \
              f"仓位{self.pos}, 价格{trade.price}"
        self.send_email(msg)

    def on_stop_order(self, stop_order: StopOrder):
        """
        Callback of stop order update.
        """
        pass
